#!/bin/bash

trap "" HUP

set -eo pipefail

BASENAME=$(basename "$0")

usage="
Usage:
  $BASENAME [options] COMMAND...

Run COMMAND in the background, logging to a logfile generated using the timestamp and a job name.
When done, send an email to the address in \$NR_EMAIL.

Options:
    -E       omit email notification
    -f N     show last N jobs finished
    -h       show help text
    -l       show running jobs
    -n name  give your job a name
    -r       read logfile for most recently started job using less
    -s N     show last N jobs started
"

if [ "$NR_BASEDIR" == "" ]; then
    BASE_DIR=$HOME/$BASENAME
    mkdir -p $BASE_DIR
else
    BASE_DIR=$NR_BASEDIR
fi

LOGFILE_DIR=$BASE_DIR/logs
mkdir -p $LOGFILE_DIR
JOB_DIR=$BASE_DIR/.jobs
mkdir -p $JOB_DIR
JOBTABLE_RUNNING=$JOB_DIR/running
touch $JOBTABLE_RUNNING
JOBTABLE_STARTED=$JOB_DIR/started
touch $JOBTABLE_STARTED
JOBTABLE_FINISHED=$JOB_DIR/finished
touch $JOBTABLE_FINISHED

color_table () {
  NAME_COLOR="\033[1;32m"
  END_COLOR="\033[0m"

  FILE=$1

  awk -F $'\t' '
    {
      printf "%s\t'$NAME_COLOR'%s'$END_COLOR'", $1, $2;
      for (i = 3; i <= NF; i++) {printf "\t%s", $i};
      printf "\n"
    }' $FILE
}

display_jobs_running () {
    for p in $(cut -d $'\t' -f 1 $JOBTABLE_RUNNING)
    do
      if ! ps -p $p > /dev/null; then remove_from_running_table $p; fi
    done
    color_table $JOBTABLE_RUNNING | column -t -s $'\t' -N PID,NAME,START,LOGFILE,CMD
}

remove_from_running_table () {
    PID=$1
    sed "/^$PID/d" $JOBTABLE_RUNNING > $JOBTABLE_RUNNING.temp && mv $JOBTABLE_RUNNING.temp $JOBTABLE_RUNNING
}

display_jobs_started () {
    NUM=$1
    if [ "$NUM" == "" ]; then NUM="10"; fi
    color_table $JOBTABLE_STARTED | tail -n $NUM | column -t -s $'\t' -N PID,NAME,START,LOGFILE,CMD
}

display_jobs_finished () {
    NUM=$1
    if [ "$NUM" == "" ]; then NUM="10"; fi
    color_table $JOBTABLE_FINISHED | tail -n $NUM | column -t -s $'\t' -N PID,NAME,START,END,EXIT,LOGFILE,CMD
}

open_latest_logfile () {
    logfile=$(tail -n 1 $JOBTABLE_STARTED | sed "s/\t/\n/g" | sed "4q;d")
    echo "Opening $logfile"
    less $logfile
}

SETNAME=false
EMAIL=true

while getopts "Ef:hln:rs:" opt; do
    case $opt in
        E)
            EMAIL=false
            ;;
        f)
            display_jobs_finished $OPTARG
            exit 0
            ;;
        h)
            echo "$usage"
            exit 0
            ;;
        l)
            display_jobs_running
            exit 0
            ;;
        n)
            NAME=$OPTARG
            ;;
        r)
            open_latest_logfile
            exit 0
            ;;
        s)
            display_jobs_started $OPTARG
            exit 0
            ;;
        *)
            echo "Error: Invalid options." >&2
            echo "$usage"
            exit 1
            ;;
    esac
done

shift $(($OPTIND - 1))

CMD="$@"

DATE_FMT="+%Y%m%d_%H%M%S"

TIMESTAMP_START=$(date $DATE_FMT)
if [ "$NAME" == "" ]
then
    CMD_WORDS=( $CMD )
    NAME=${CMD_WORDS[0]}
fi
logfile="$LOGFILE_DIR/$TIMESTAMP_START.$NAME.log"

if [ "$NR_EMAIL" == "" ]; then
    echo "Note: No email specified in \$NR_EMAIL. Command will be run without email notification."
    EMAIL=false
fi

run() {
    eval $CMD &> $logfile &
    PID=$!
    echo -e "$PID\t$NAME\t$TIMESTAMP_START\t$logfile\t\"$CMD\"" >> $JOBTABLE_STARTED
    echo -e "$PID\t$NAME\t$TIMESTAMP_START\t$logfile\t\"$CMD\"" >> $JOBTABLE_RUNNING
    wait $PID
    EXITCODE=$?
    TIMESTAMP_END=$(date $DATE_FMT)
    mail_body="
Your command has finished.\n\n\n
Name: $NAME\n
Command:\n\n$CMD\n
Start: $TIMESTAMP_START\n
End: $TIMESTAMP_END\n
Exit code: $EXITCODE\n
Logfile:\n\n$logfile\n\n\n
("$BASENAME")
"
    mail_subj="Command finished: $NAME"
    if [ $EMAIL ]; then
        echo -e "$mail_body" | mailx -s "$mail_subj" $NR_EMAIL
    fi
    remove_from_running_table $PID
    echo -e "$PID\t$NAME\t$TIMESTAMP_START\t$TIMESTAMP_END\t$EXITCODE\t$logfile\t\"$CMD\"" >> $JOBTABLE_FINISHED
}

run &
display_jobs_started 1
